<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flex</title>
      <link href="posts/10238/"/>
      <url>posts/10238/</url>
      
        <content type="html"><![CDATA[<h1 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h1><p>flex是CSS中 的又一种布局手段，它主要用来代替浮动完成页面的布局。</p><p>flex可以使元素具有弹性，让元素可以跟随页面大小的改变而改变。</p><p>flex是一种弹性盒子的布局方式，抛弃原来的float布局方式，<code>float、clear、vertical-align</code>禁止使用。</p><h2 id="flex核心"><a href="#flex核心" class="headerlink" title="flex核心"></a>flex核心</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>如果要使用弹性盒，必须先将一个元素设置为弹性容器。</p><ul><li>我们通过display来设置弹性容器</li><li><code>display:flex</code> 设置为块级弹性容器</li><li><code>display:inline-flex</code> 设置为行内的弹性容器</li></ul><h3 id="容器的轴线"><a href="#容器的轴线" class="headerlink" title="容器的轴线"></a>容器的轴线</h3><p>分横向和纵向，默认主轴线是横轴</p><h3 id="项目-弹性元素"><a href="#项目-弹性元素" class="headerlink" title="项目(弹性元素)"></a>项目(弹性元素)</h3><p>弹性容器的子元素就是弹性元素（弹性项）</p><p>弹性元素可以同时是弹性容器</p><p>项目在主轴方向上并不会超出盒子，而且项目按照容器的主轴线进行排列。</p><p>项目会自动转换为块元素。</p><p>项目如果没有设置高度，默认和容器的高度一致。</p><h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><code>flex-direction</code>：指定容器中弹性元素的排列方式</p><ul><li><p><code>row</code>：默认值，弹性元素在容器中水平排列（左向右）主轴：自左向右</p></li><li><p><code>row-reverse</code>：弹性元素在容器中反向水平排列（右向左）主轴：自右向左</p></li><li><p><code>column</code>：弹性元素纵向排列（自上向下）</p></li><li><p><code>column-reverse</code>：反向纵向排列（自下向上）</p></li></ul><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code>：设置弹性元素是否在弹性容器中自动换行</p><ul><li><p><code>nowwrap</code>：默认值，元素不会自动换行</p><p><img src="https://img2.jimu98.cn/haley/20201018164527.png" alt="image-20201018164526922"></p></li><li><p><code>wrap</code>：元素沿着辅轴方向自动换行(第一行在上方)</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201018164347522.png" alt="image-20201018164347522">)<code>reverse</code>：元素沿着辅轴的反方向换行(第一行在下方)</p><p><img src="https://img2.jimu98.cn/haley/20201018164438.png" alt="image-20201018164438357"></p></li></ul><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code>是<code>flex-wrap</code>和<code>flex-direction</code>的简写属性</p><p>例：flex-flow：row  wrap-reverse</p><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code>：主轴上的元素的排列方式</p><ul><li><p><code>flex-start</code>（默认值）：左对齐</p></li><li><p><code>flex-end</code>：右对齐</p></li><li><p><code>center</code>： 居中</p></li><li><p><code>space-between</code>：两端对齐，项目之间的间隔都相等。</p></li><li><p><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p></li><li><p><code>space-evenly</code>：空白部分分布到元素的单侧</p></li></ul><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code>：元素在副轴上对齐的对齐方式</p><ul><li><p><code>stretch</code> ：默认值，将元素的长度设置为相同的值</p></li><li><p><code>flex-start</code> ：元素不会拉伸，沿着辅轴的起边对齐</p></li><li><p><code>flex-end</code> ：沿着辅轴的终边对齐</p></li><li><p><code>center</code> ：居中对齐</p></li><li><p><code>baseline</code> ：基线对齐</p></li></ul><p>如果项目没有设置副轴方向上的大小默认和容器副轴的大小一致，设置了align-items项目的大小，就是项目本身的大小。</p><h3 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h3><p><code>align-content</code>：多轴线(换行)行在副轴上的对齐方式</p><ul><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code>： 决定弹性元素的排列顺序，值越小，排列越前，默认为0</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code>：定义弹性元素的放大比例。</p><ul><li>0：默认值，即有空余空间，也不放大。</li><li>1：占满容器的剩余空间，如果多个弹性元素都设置了，根据比例放大。</li><li>1以上：会按照比例分配剩余空间</li></ul><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p><code>flex-shrink</code>：定义弹性元素的缩小比例</p><ul><li>1：默认值，空间不足时，等比例收缩</li><li>0：不允许缩小</li><li>值越大，收缩的越多</li></ul><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code>：指定的是元素在主轴上的基础长度</p><ul><li><p>如果主轴是横向的，则该值指定的就是元素的宽度</p></li><li><p>如果主轴是纵向的，则该值指定的就是元素的高度</p></li><li><p>默认值是auto，表示参考元素自身的高度和宽度</p></li><li><p>如果传递了一个具体的数值，则以该值为准。</p></li></ul><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code>属性是<code>flex-grow</code>、 <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code></p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code>：用来覆盖当前弹性元素上的align-items，值和align-items一样，可以给单个的弹性元素指定样式。</p><p>注意：如果是移动端就可以用，如果是Pc端就要考虑兼容问题。</p>]]></content>
      
      
      <categories>
          
          <category> 布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="posts/5063/"/>
      <url>posts/5063/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="node简介"><a href="#node简介" class="headerlink" title="node简介"></a>node简介</h2><p>Node.js是一个基于Chrome V8引擎的JavaScript运行时。 </p><p>通过node，可以使js代码在服务器端执行。</p><p>Node仅仅对Es标准进行了实现，所以在Node中不包含DOM和BOM</p><ul><li>node中可以使用所有的内建对象(String Number Boolean Math Date RegExp Function object Array)。而BOM和DOM都不能使用，但是可以使用console，也可以使用定时器(setTimeout()、setInterval())</li></ul><p>Node可以在后台用来编写服务器。Node编写服务器都是单线程的服务器。</p><p>进程和线程</p><ul><li>进程就是—个一个的工作计划(工厂中的车间)</li><li>线程是计算机最小的运算单位(工厂中的工人)</li></ul><p>传统的服务器都是多线程的，每进来一个请求，就创建—个线程去处理请求。</p><p>node的请求是单线程的，node处理请求时是单线程，但是在后台拥有一个I/O线程池</p><h2 id="node-js的安装"><a href="#node-js的安装" class="headerlink" title="node.js的安装"></a>node.js的安装</h2><p>百度node，进入中文网直接下载安装包，直接进行安装不需要做任何的选择，一直下一步即可。任意位置打开命令行工具，输入 <code>node -v</code> 和 <code>npm -v</code> 查看 node 和 npm 的版本号，如果有就安装好了，如果命令出错尝试重启电脑再次执行。</p><p>npm：安装好node之后，npm就附带安装好了。它是node包管理工具(node package manager)</p><h2 id="node-模块使用"><a href="#node-模块使用" class="headerlink" title="node 模块使用"></a>node 模块使用</h2><ul><li>新建文件夹，将该文件夹初始化为 node(npm) 项目，执行 <code>npm init -y</code></li><li>新建 index.html 页面</li><li>安装 jquery 插件。执行 <code>npm install jquery</code></li><li>安装完毕之后，项目内多出两个文件<ul><li>node_modules 文件夹：存储下载的包的文件夹</li><li>package-lock.json 文件：该文件记录安装的包的详细信息</li></ul></li><li>在 html 中使用 jquery 可以按照之前的路径导入(不推荐)。现在我们使用 npm 下载模块。可以使用 node 模块的方式导入安装好的包。 使用 <code>require(包名)</code>，但是当做模块导入之后浏览器会报错。因为模块语法浏览器不支持，需要编译。我们可以使用webpack打包编译。</li><li>但是如果我们只是想运行js文件，则直接在命令行窗口执行<code>node js文件名</code>就可以看到我们导入文件的运行结果了。</li></ul><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="1、模块分类"><a href="#1、模块分类" class="headerlink" title="1、模块分类"></a>1、模块分类</h3><p>核心模块：由node引擎提供的模块，核心模块的标识就是模块的名字。</p><p>文件模块：由用户自己创建的模块，文件模块的标识就是文件的路径(绝对路径，相对路径)。</p><h3 id="2、模块的定义"><a href="#2、模块的定义" class="headerlink" title="2、模块的定义"></a>2、模块的定义</h3><p>① 在node中，一个js文件就是一个模块</p><p>② 在Node中，每一个js文件中的js代码都是独立运行在一个函数中，而不是全局作用域，所以一个模块中的变量和函数在其他模块中无法访问。</p><p>③ 在node中有一个全局对象global，它的作用和网页中window类似</p><ul><li><p>在全局中创建的变量都会作为global的属性保存</p></li><li><p>在全局中创建的函数都会作为global的方法保存</p></li><li><p>实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参。</p><ul><li>exports：该对象用来将变量或函数暴露到外部</li><li>require：函数，用来引入外部的模块</li><li>module：代表的是当前模块本身，exports就是module的属性，既可以使用exports导出，也可以使用module.exports导出</li><li>_filename：当前模块的完整路径</li><li>_dirname：当前模块所在文件夹的完整路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>，<span class="built_in">require</span>，<span class="built_in">module</span>,_filename,_dirname</span>) </span>&#123;</span><br><span class="line"><span class="comment">//arguments.callee：这个属性保存的是当前执行的函数对象</span></span><br><span class="line"><span class="built_in">console</span>.log(argument.callee+<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="④-导出变量和函数"><a href="#④-导出变量和函数" class="headerlink" title="④ 导出变量和函数"></a>④ 导出变量和函数</h4><p>使用exports</p><ul><li>例子：exports.属性=属性值     exports.方法=函数</li></ul><p>使用module.exports</p><ul><li><p>例子：module.exports.属性=属性值     module.exports.方法=函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.a=<span class="number">1008</span></span><br></pre></td></tr></table></figure></li><li><p>如果导出多个，就使用对象   module.exports={}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1008</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">1000</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; a，b&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3、模块的标识-模块的导入"><a href="#3、模块的标识-模块的导入" class="headerlink" title="3、模块的标识(模块的导入)"></a>3、模块的标识(模块的导入)</h3><p>模块的标识就是模块的名字或路径</p><p>node通过模块的标识来寻找模块的，通过require()函数来引入外部的模块</p><p>使用require引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块。</p><p>对于核心模块(npm中下载的模块)，直接使用模块的名字对其进行引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $= <span class="built_in">require</span>(<span class="string">&#x27;jquery&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span> ( <span class="string">&quot;express&quot;</span>)</span><br></pre></td></tr></table></figure><p>对于自定义的文件模块，需要通过文件的路径来对模块进行引入,，路径可以是绝对路径，如果是相对路径必须以./或../开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="built_in">require</span>(<span class="string">&#x27; ./about&#x27;</span>)</span><br><span class="line"><span class="comment">//x就是引入的模块</span></span><br></pre></td></tr></table></figure><h3 id="4、exports和module-exports的区别"><a href="#4、exports和module-exports的区别" class="headerlink" title="4、exports和module.exports的区别"></a>4、exports和module.exports的区别</h3><p>通过exports只能使用<code>.</code>的方式来向外暴露内部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.xxx=xxx</span><br></pre></td></tr></table></figure><p>module.exports既可以通过<code>.</code>的形式，也可以直接赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports.xxx=xxx</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="npm简介"><a href="#npm简介" class="headerlink" title="npm简介"></a>npm简介</h2><p>NPM(Node Package Manager)</p><p>对于Node而言，NPM帮助其完成了第三方模块的发布、安装和依赖等。借助NPM，Node与第三方模块之间形成了很好的一个生态系统。</p><h3 id="npm的命令"><a href="#npm的命令" class="headerlink" title="npm的命令"></a>npm的命令</h3><p><code>npm -v</code> 查看npm的版本</p><p><code>npm version</code> 查看所有模块的版本</p><p><code>npm search 包名</code> 搜索包</p><p><code>npm remove / r 包名</code> 删除包</p><p><code>npm install</code> 下载当前项目所依赖的包</p><h4 id="npm的下载-三种方式"><a href="#npm的下载-三种方式" class="headerlink" title="npm的下载(三种方式)"></a>npm的下载(三种方式)</h4><p><code>npm i 包名 --save</code>   这种方式一般下载的是项目的必须依赖，记录到 package.json 内的 dependencies 字段内。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install jquery@2.3.4 --save</span><br><span class="line">npm i jquery -S</span><br><span class="line">npm i jquery</span><br></pre></td></tr></table></figure><p><code>npm i 包名 包名 --save-dev</code>   这种方式安装的是项目的非必须依赖(工具类)，记录到 package.json 内的 devDependencies 字段内</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br><span class="line">npm i webpack -D</span><br></pre></td></tr></table></figure><p><code>npm i -g 包名</code>  全局安装包（全局安装的包一般都是一些工具）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g server</span><br></pre></td></tr></table></figure><h5 id="npm-下载包的好处"><a href="#npm-下载包的好处" class="headerlink" title="npm 下载包的好处"></a>npm 下载包的好处</h5><ul><li>可以使用模块导入</li><li>下载的包的信息全部记录在 package.json 内</li><li>同事之间相互传递项目的时候不需要传递 node_modules 文件夹，使用的时候只需要执行 <code>npm i</code> 命令会重新下载将所有的包。</li></ul><h4 id="npm的卸载"><a href="#npm的卸载" class="headerlink" title="npm的卸载"></a>npm的卸载</h4><p>卸载包使用 <code>npm uninstall 包名</code>，通过哪种方式安装的就怎样卸载</p><h3 id="npm-的一些小技巧"><a href="#npm-的一些小技巧" class="headerlink" title="npm 的一些小技巧"></a>npm 的一些小技巧</h3><p>直接在任意位置的命令行执行即可</p><ul><li><p>切换 npm 包的来源，默认的来源是外网服务器，速度比较慢</p></li><li><p>镜像：因为资源都在外国的网站，淘宝把他们都做了一份镜像，所以要修改npm的下载源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p>显示安装的进度</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set loglevel&#x3D;http</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h3><p>Buffer的结构和数组很像，操作的方法也和数组类似。但是数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据的。</p><p>在buffer中存储的都是二进制数据，但是在显示时都是以16进制的形式显示。</p><p>buffer中每一个元素的范围是从00—ff (0-255)，如果要添加的值超过了范围，就会把输入的值转换为2进制，然后取后8位，转换为十进制输出。</p><p>Buffer的大小一旦确定，则不能修改，Buffer实际上是对底层内存的直接操作。</p><p>使用buffer不需要引入模块，直接使用即可。</p><p>buffer数据在控制台输出就一定是10进制，如果我们不希望输出10进制，可以使用tostring方法修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf2[<span class="number">2</span>].toString(<span class="number">16</span>)</span><br><span class="line"><span class="comment">//这样就修改成了16进制显示</span></span><br></pre></td></tr></table></figure><h4 id="buffer的几种创建方法"><a href="#buffer的几种创建方法" class="headerlink" title="buffer的几种创建方法"></a>buffer的几种创建方法</h4><p>1、将一个字符串转换为buffer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">varstr=<span class="string">&quot;Hello 尚硅谷&quot;</span> </span><br><span class="line"><span class="keyword">var</span> buf = Buffer.from (str);</span><br><span class="line"><span class="built_in">console</span>.log (buf) ;</span><br><span class="line"><span class="comment">//一个英文字母占一个字节，一个汉字占三个字节</span></span><br><span class="line"><span class="built_in">console</span>.log(buf.length)<span class="comment">//占用内存的大小  15</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length)<span class="comment">//字符串的长度    9</span></span><br></pre></td></tr></table></figure><p>2、创建一个指定大小的buffer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个10个字节的buffer，数据是空的</span></span><br><span class="line"><span class="keyword">var</span> buf2 = Buffer.alloc(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>3、创建一个指定大小的buffer，但是buffer中可能含有敏感数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个10个字节的buffer，原来的数据还在</span></span><br><span class="line">sar buf3 = Buffer.allocUnsafe(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h4 id="将缓冲区中的数据转换为字符串"><a href="#将缓冲区中的数据转换为字符串" class="headerlink" title="将缓冲区中的数据转换为字符串"></a>将缓冲区中的数据转换为字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用toString方法</span></span><br><span class="line"><span class="keyword">var</span> buf4 = Buffer.from(<span class="string">&quot;我是一段文本数据&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log (buf4.tostring()) ;</span><br></pre></td></tr></table></figure><h3 id="fs"><a href="#fs" class="headerlink" title="fs"></a>fs</h3><p>文件系统(File system)：文件系统简单来说就是通过Node来操作系统中的文件。</p><p>使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br></pre></td></tr></table></figure><p>fs模块中所有的操作都有两种形式可供选择：同步和异步。</p><ul><li><p>同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码。同步方法带sync。</p></li><li><p>异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回。异步方法没有sync，但是都需要回调函数。</p></li></ul><h4 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h4><h5 id="同步文件的写入"><a href="#同步文件的写入" class="headerlink" title="同步文件的写入"></a>同步文件的写入</h5><p>1、打开文件：fs .opensync (path, flags [ , mode])</p><ul><li><p>path：文件的路径</p></li><li><p>flags：打开文件要做的操作的类型</p><ul><li>r：只读的</li><li>w：可写的</li></ul></li><li><p>mode设置文件的操作权限，—般不传</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs .openync(<span class="string">&quot;hello .txt&quot;</span> , <span class="string">&quot;w&quot;</span>);</span><br></pre></td></tr></table></figure><p>返回值：该方法会返回一个文件的描述符作为结果，我们可以通过该描述符来对文件进行各种操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fd = fs.opensync(<span class="string">&quot;hello .txt&quot;</span> , <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="comment">//返回一个文件的编号</span></span><br></pre></td></tr></table></figure><p>2、向文件中写入内容：fs.writesync (fd, string[ , position [ , encoding]])</p><ul><li>fd文件的描述符，需要传递写入文件的描述符</li><li>string要写入的内容</li><li>position写入的起始位置</li><li>encoding写入的编码，默认utf-8</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.writeync(fd , <span class="string">&quot;今天天气真不错～~~&quot;</span>);</span><br></pre></td></tr></table></figure><p>3、保存并关闭文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.closesync(fd)</span><br><span class="line"><span class="comment">//fd是要关闭文件的描述符</span></span><br></pre></td></tr></table></figure><h5 id="异步文件的写入"><a href="#异步文件的写入" class="headerlink" title="异步文件的写入"></a>异步文件的写入</h5><p>1、打开文件：fs.open(path, flags[ ,mode] ,callback)</p><p>异步调用的方法，结果都是通过回调函数的参数返回的</p><ul><li><p>回调函数两个参数:</p><ul><li><p>err错误对象，如果没有错误则为null</p></li><li><p>fd文件的描述符</p></li></ul></li></ul><p>2、向文件中写入内容：fs.write(fd,string[,position[ ,encoding]] , callback)</p><p>3、关闭文件：fs.close(fd, callback )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开文件</span></span><br><span class="line">fs.open(<span class="string">&#x27;hello.tex&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//判断是否出错</span></span><br><span class="line">    <span class="keyword">if</span>（！err)&#123;</span><br><span class="line">        <span class="comment">//如果没有出错，则对文件进行写入操作</span></span><br><span class="line">        fs.write(fd,<span class="string">&#x27;这是异步写入的内容&#x27;</span>，<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//关闭文件</span></span><br><span class="line">            fs.close(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;文件已关闭&#x27;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="简单文件的写入"><a href="#简单文件的写入" class="headerlink" title="简单文件的写入"></a>简单文件的写入</h5><p>异步：fs.writeFile(file, data [ , options] , callback)</p><p>同步：fs.writeFilesync(file, data [ , options])</p><ul><li><p>file：要操作文件的路径</p></li><li><p>data：要写入的数据</p></li><li><p>options选项，可以对参数进行一些配置</p></li><li><p>callback：当写入完成以后执行的函数</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入fs模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.writeFile(<span class="string">&#x27;hello.txt&#x27;</span>,<span class="string">&#x27;这是通过writeFile写入的内容&#x27;</span>，<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="流式文件的写入"><a href="#流式文件的写入" class="headerlink" title="流式文件的写入"></a>流式文件的写入</h5><p>同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出。</p><p>1、创建一个可写流：fs.createwritestream(path [, options])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ws = fs.createwritestream(<span class="string">&quot;hello.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>2、通过ws向文件中输出内容(可写入多次)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ws.write(<span class="string">&quot;通过可写流写入文件的内容&quot;</span>）;</span><br><span class="line">ws.write(<span class="string">&quot;通过可写流写入文件的内容&quot;</span>）;</span><br></pre></td></tr></table></figure><p>3、关闭流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ws.end();</span><br></pre></td></tr></table></figure><p><strong>可以通过监听流的open和close事件来监听流的打开和关闭。</strong></p><ul><li><p>on(事件字符串，回调函数)：可以为对象绑定—个事件。</p></li><li><p>once(事件字符串，回调函数)：可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ws.once(<span class="string">&#x27;open&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;流打开了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">ws.once(<span class="string">&#x27;close&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;流关闭了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="文件的读取"><a href="#文件的读取" class="headerlink" title="文件的读取"></a>文件的读取</h4><h5 id="同步文件的读取"><a href="#同步文件的读取" class="headerlink" title="同步文件的读取"></a>同步文件的读取</h5><h5 id="异步文件的读取"><a href="#异步文件的读取" class="headerlink" title="异步文件的读取"></a>异步文件的读取</h5><h5 id="简单文件的读取"><a href="#简单文件的读取" class="headerlink" title="简单文件的读取"></a>简单文件的读取</h5><p>异步：fs.readFile(path [ , options] , callback)</p><p>同步：fs.readFilesync(path [ , options])</p><p>data读取到的数据，会返回一个buffer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.readFile(<span class="string">&#x27;hello.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="流式文件的读取"><a href="#流式文件的读取" class="headerlink" title="流式文件的读取"></a>流式文件的读取</h5><p>流式文件的读取也适用于一些比较大的文件，可以分多次将文件读取到内存中。</p><p>如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据</p><p>流式不会一次读取完，每次读取65536个字节。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line">rs.on(<span class="string">&#x27;data&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//结果就在data里</span></span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将读出的数据写入另一个文件的简单方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//创建一个可读流</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">&#x27;hello.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//创建一个可写流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">&#x27;b.mp3&#x27;</span>);</span><br><span class="line"><span class="comment">//pipe()可以将可读流中的内容，直接输出到可写流中</span></span><br><span class="line">rs.pipe(ws)</span><br></pre></td></tr></table></figure><h4 id="fs中的其他方法"><a href="#fs中的其他方法" class="headerlink" title="fs中的其他方法"></a>fs中的其他方法</h4><p>1、检查一个文件是否存在</p><p>同步：<code>fs.existssync(path)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查是否存在a123.mp3</span></span><br><span class="line"><span class="keyword">var</span> isExists = fs.existssync(<span class="string">&quot;a123.mp3&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log (isExists);</span><br></pre></td></tr></table></figure><p>2、获取文件的信息</p><p>异步：<code>fs.stat(path,callback)</code>   </p><p>同步： <code>fs.statsync(path)</code></p><p>它会给我们返回一个对象，这个对象中保存了当前对象状态的相关信息</p><ul><li><p>这个对象的属性</p><ul><li><p>size：文件的大小</p></li><li><p>isFile()：是否是一个文件</p></li><li><p>isDirectory()：是否是一个文件夹</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.stat(<span class="string">&#x27;a.mp3&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,stat</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(stat);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、删除文件：</p><p>异步：<code>fs.unlink(path,callback)</code>  </p><p>同步：   <code>fs.unlinkSync(path)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.unlinkSync ( <span class="string">&quot;hello.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>4、读取一个目录的目录结构：</p><p>异步：<code>fs.readdir(path[,options],callback)</code></p><p>同步：<code>fs.readdirSync(path[,options])</code></p><p>files是一个字符串数组，每一个元素就是一个文件夹或文件的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.readdir(<span class="string">&#x27;.&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,files</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(files);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>5、截断文件，将文件修改为指定的大小</p><p>异步：<code>fs.truncate(path,len,callback)</code></p><p>同步：<code>fs.truncateSync(path,len)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.truncateSync(<span class="string">&quot;hello.txt&quot;</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>6、创建一个目录</p><p>异步：<code>fs.mkdir(path[ ,mode],callback)</code></p><p>同步：<code>fs.mkdirSync(path[,mode])</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.mkdirSync(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>7、删除一个目录</p><p>异步：<code>fs.rmdir(path, callback)</code></p><p>同步：<code>fs.rmdirSync(path)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.rmdirSync( <span class="string">&quot;hello.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>8、对文件进行重命名</p><p>异步：<code>fs.rename(oldPath,newPath,callback)</code></p><p>同步：<code>fs.renameSync(oldPath, newPath)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(<span class="string">&#x27;a.mp3&#x27;</span>,<span class="string">&#x27;笔记。mp3&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;修改成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>也可以通过该方法实现剪切操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.rename(<span class="string">&#x27;笔记.txt&#x27;</span>,<span class="string">&#x27;c:\\Users\\Desktop\\笔记.mp3&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;修改成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>9、监视文件的修改</p><p><code>fs.watchFile(filename[,options],listener)</code></p><p>参数：</p><ul><li><p>filename：要监视的文件的名字</p></li><li><p>options：配置选项</p></li><li><p>listener：回调函数，当文件发生变化时，回调函数会执行</p><ul><li><p>在回调函数中会有两个参数:</p><ul><li><p>curr：当前文件的状态</p></li><li><p>prev：修改前文件的状态</p></li><li><p>这两个对象都是stats对象</p></li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.watchFile(<span class="string">&#x27;hello.txt&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件发生了变化&#x27;</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;修改前文件大小&#x27;</span>：+prev.size);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;修改后文件大小&#x27;</span>：+curr.size);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="posts/25246/"/>
      <url>posts/25246/</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><p>Git是目前世界上最先进的分布式版本控制系统。</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>需要使用命令行，安装 git即可。</p><p>git安装的时候不需要选择安装目录，一直下一步，直到出现很多复选框其中有两个是 <code>git bash here</code> 和 <code>git gui here</code> ，将后面的勾选掉(不勾选)，继续一直下一步即可。安装完毕之后在任意空白处点击鼠标右键就会出现 <code>git bash here</code> 命令。</p><h3 id="基本的shell命令"><a href="#基本的shell命令" class="headerlink" title="基本的shell命令"></a>基本的shell命令</h3><ul><li><code>cd</code>  改变目录</li><li><code>cd..</code>  回退到上一个目录，直接cd进入默认目录</li><li><code>pwd</code>  显示当前所在的目录路径</li><li><code>Is(ll)</code>  都是列出当前目录中的所有文件，只不过两个ll列出的内容更为详细<ul><li><code>ls -a</code>  查看当前目录下的所有内容，包括隐藏文件</li></ul></li><li><code>touch</code>  新建一个文件，如touch index.js就会在当前目录下新建一-个index.js文件。</li><li><code>rm</code>  删除一个文件，如rm index.js就会把index.js文件删除。</li><li><code>mkdir</code>  新建一个目录，就是新建一个文件夹。</li><li><code>rm-r</code>  删除一个文件夹  </li><li><code>rm-f</code>  强制删除</li><li><code>cp</code>  复制或重命名   <ul><li><code>-r</code>  可以复制文件夹</li></ul></li><li><code>mv</code>  移动文件， mv index.html test 就是把index.html移动到test文件夹下</li><li><code>cat</code>  查看文件里面的内容</li><li><code>clear</code>  清屏</li><li><code>history</code>  查看命令历史。</li><li><code>exit</code>  退出。</li></ul><h2 id="git的基本理论"><a href="#git的基本理论" class="headerlink" title="git的基本理论"></a>git的基本理论</h2><p>Git本地有三个工作区域：工作目录( Working Directory)、暂存区(Stage/Index)、资源库(Repository或Git Directory)；如果再加上远程的git仓库(Remote Directory)就可以分为四个工作区域。文件在这四个区域之间的转换关系如下：</p><p><img src="http://img8.jimu98.cn/20200720191119.png" alt=""></p><h2 id="git的基本配置"><a href="#git的基本配置" class="headerlink" title="git的基本配置"></a>git的基本配置</h2><p>命令：git config –global –list</p><p>可以查看自己的名字和邮箱，也可以通过该命令设置。如下图。</p><p><img src="http://img8.jimu98.cn/20200721223351.png" alt="image-20200721223351587"></p><h2 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h2><ul><li><code>git config -l</code>  查看配置</li><li><code>git --version</code> 查看 git 版本号,有时候可以简写成 <code>-v</code></li><li><code>git log</code> 查看本地版本</li><li><code>git status</code> 查看当前仓库的状态</li><li><code>git init</code> 将本地项目变成仓库</li><li><code>git clone 仓库地址</code> 克隆仓库到本地</li><li><code>git add .</code>添加所有文件到暂存区  <code>.</code> 代表所有的修改，也可以换成文件名</li><li><code>git commit -m&#39;留言&#39;</code>  提交暂存区中的内容到本地仓库，-m提交信息</li><li><code>git push</code> 将做好的版本提交到远端</li><li><code>git pull</code> 将远端的更新拉取到本地</li><li><code>git branch 分支名称</code> 创建新分支</li><li><code>git branch</code> 查看分支</li><li><code>git checkout 分支名称</code> 切换分支</li><li><code>git merge 分支名称</code> 当前分支合并分支其他分支</li><li><code>git pull origin master</code> 拉取主分支上的更新</li><li><code>git checkout -b 分支名称</code> 创建新的分支并切换过去</li></ul><h2 id="创建远程仓库的方式"><a href="#创建远程仓库的方式" class="headerlink" title="创建远程仓库的方式"></a>创建远程仓库的方式</h2><h3 id="1、创建全新的仓库：git-init-初始化"><a href="#1、创建全新的仓库：git-init-初始化" class="headerlink" title="1、创建全新的仓库：git init 初始化"></a>1、创建全新的仓库：git init 初始化</h3><ul><li><p>网上传建一个项目同名(你的项目文件夹是什么名字，仓库名与之相同)的空仓库(创建的时候不添加 reademe 文件)</p></li><li><p>在你的本地项目文件夹内打开命令行工具</p></li><li><p>将自己本地的项目初始化成 git 仓库，执行 <code>git init</code> 命令</p></li><li><p>在本地的项目里，创建一个README.MD文件，执行 <code>add .</code> 和 <code>git commit -m &#39;留言&#39;</code>命令</p></li><li><p>去网上的空仓库复制代码，第一个提示框的最后两行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/Haley-JJ/first_demo.git</span><br><span class="line">这行命令的作用是给本地的仓库添加一个远端地址， 名称是origin， 地址是后面的地址</span><br><span class="line">git push -u origin master</span><br><span class="line">这行命令的作用是将版本上传到已经添加的远端origin</span><br></pre></td></tr></table></figure></li><li><p>执行完毕之后上传成功，想要修改的话，直接在本地仓库修改，然后执行上传三部曲即可</p></li></ul><h3 id="2、克隆远程仓库：git-clone-地址"><a href="#2、克隆远程仓库：git-clone-地址" class="headerlink" title="2、克隆远程仓库：git clone+地址"></a>2、克隆远程仓库：git clone+地址</h3><ul><li><p>先将网上的仓库下载到本地，需要使用命令 <code>git clone 仓库地址</code></p></li><li><p>将想要托管的项目放到该仓库内，仓库内不必要的东西删除</p></li><li><p>将本地和网上关联起来(将自己本地的修改上传)</p><ul><li><p>将自己对仓库的所有修改添加到 github 远端记录，执行 <code>git add .</code></p></li><li><p>将记录好的修改做成版本，执行命令 <code>git commit -m&#39;留言&#39;</code></p><ul><li><p>如果是第一次和 github 关联的话，会失败，然后会提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">please tell me who you are ?</span><br><span class="line">让你依次分别执行以下命令</span><br><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>告诉他之后再次执行 <code>git commit -m&#39;留言&#39;</code></p></li></ul></li><li><p>将新的版本上传，执行命名 <code>git push</code></p><ul><li><p>由于是第一次和网上关联，会失败提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">让你执行</span><br><span class="line">git push -u origin master</span><br><span class="line">执行完毕之后就成功了</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>上传成功之后，想要修改的话，直接在本地仓库修改，然后执行上传三部曲即可</p></li></ul><h2 id="git-的基本操作"><a href="#git-的基本操作" class="headerlink" title="git 的基本操作"></a>git 的基本操作</h2><h3 id="多个人或者多台电脑对同一仓库的同一分支进行操作"><a href="#多个人或者多台电脑对同一仓库的同一分支进行操作" class="headerlink" title="多个人或者多台电脑对同一仓库的同一分支进行操作"></a>多个人或者多台电脑对同一仓库的同一分支进行操作</h3><p>如果远端存在本地不存在的版本时，本地需要向仓库里上传并执行 git 上传三部曲时，执行到<code>git push</code>命令就会提示失败。可以使用<code>git pull</code>命令</p><p>当执行 <code>git pull</code> 将远端的版本拉取到本地，但是本地已经存在了一个提交的版本</p><ul><li><p>当这两个版本不冲突的时候(不是同一个文件，或者是同一个文件的不同位置)</p><ul><li>git 会自动合并两个版本，并弹出新的命令面板让你提交合并的版本留言，可以直接按住shift +z+z，退出留言面板。</li><li>再次执行 git push，上传更新</li></ul></li><li><p>当这两个版本冲突的时候(修改的是同一个文件的同一个位置)</p><ul><li>git 并不会自动合并，而是将冲突体现在当前的文件内，需要用户自己选择保留哪个更改，选择完毕之后，使用 git 上传三步提交即可。</li></ul></li></ul><h3 id="github-的分支操作"><a href="#github-的分支操作" class="headerlink" title="github 的分支操作"></a>github 的分支操作</h3><p>一个仓库内默认只有一个分支 master，通常称为主分支(用来存放合并后的代码)。可以多个分支。</p><p>一般工作流程是先在主分支将项目的主体框架搭建完毕，然后创建多个分支，每个分支代表不同的功能，不同的程序猿分别在不同分支内进行开发，开发完毕后将代码合并到主分支上。</p><ul><li>创建一个仓库(有README.md文件)，然后克隆到本地，添加公共的内容，然后上传。</li><li>创建新的分支，使用 <code>git branch 分支名称</code>命令。分支创建的时候里面的内容和主分支是一模一样的。</li><li>需要将创建好的分支上传到网上，可能直接使用 <code>git push</code> 命令，但是由于网上并没有新分支，所以需要使用 <code>git push --set-upstream origin yourbranch</code> 上传。此时本地和网上仓库完全同步了。</li><li>主分支分别合并分支的内容，然后上传。需要使用 <code>git merge 分支名称</code> 命令合并分支。合并之后再次使用<code>git push</code>命令上传。</li></ul><p><strong>注意</strong>：如果存在多个分支，会弹出新的命令面板让你提交合并之后的版本留言，可以直接按住shift +z+z，退出留言面板，再次上传。</p><h3 id="github-的特殊分支：gh-pages"><a href="#github-的特殊分支：gh-pages" class="headerlink" title="github 的特殊分支：gh-pages"></a>github 的特殊分支：gh-pages</h3><p>mater 分支内已经存放好了其他分支做好的项目，github 仓库有一个特殊的分支叫 gh-pages，该分支下的内容会被自动托管到github 免费服务器上，也就是说只要该分支下有 index.html 就可以直接使用网址访问。只需要直接创建 gh-pages 分支，并上传到网上即可。</p><h2 id="使用-ssh-key-公钥"><a href="#使用-ssh-key-公钥" class="headerlink" title="使用 ssh-key 公钥"></a>使用 ssh-key 公钥</h2><p>将自己电脑的当前系统和 github 关联，当用户在上传或下载仓库的时候使用 ssh 方式，可以实现用户的免密码登录。</p><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><ul><li><p>打开命令行工具 输入 <code>cd ~</code> 命令</p></li><li><p>执行 <code>ssh-keygen</code> 命令，生成电脑上的公钥和私钥，一直回车直到出现密码图即可。</p></li><li><p>找到生成的公钥和私钥，位置在 <code>~/.ssh/</code> 文件夹下，使用 cat 命令(<code>cat .ssh/id_rsa.pub</code>)打印出公钥内容并复制</p><ul><li>如果生成的秘钥名称不是<strong>id_rsa.pub</strong>，就需要进行如下操作<ul><li>执行 <code>cd .ssh</code>，再执行 <code>ls -a</code> 查看自己的秘钥名称</li><li>使用 <code>cat 你的公钥名称</code> ，复制打印出的公钥内容</li></ul></li></ul></li><li><p>打开 github 网站，点击头像的下箭头选择 setting，找到 ssh key 新增一个即可。</p></li><li><p>验证 ssh 是否生效的话，需要重新从网上下载(选择 ssh 方式下载)仓库到本地，再次上传更新的时候，如果不需要输入用户名和密码，那就是生效了。</p></li></ul><h4 id="如果觉得太多的命令不容易操作的话，我们就可以使用另一种简单的方法"><a href="#如果觉得太多的命令不容易操作的话，我们就可以使用另一种简单的方法" class="headerlink" title="如果觉得太多的命令不容易操作的话，我们就可以使用另一种简单的方法"></a>如果觉得太多的命令不容易操作的话，我们就可以使用另一种简单的方法</h4><ul><li><p>进入C:\users\Administrator.ssh目录</p></li><li><p>生成公钥：<code>ssh-keygen -t rsa</code> rsa加密</p></li><li><p>找到生成的公钥文件<strong>id_rsa.pub</strong>，去网站粘贴生成的加密文件</p></li></ul><h2 id="仓库根目录下的-gitignore-文件"><a href="#仓库根目录下的-gitignore-文件" class="headerlink" title="仓库根目录下的 .gitignore 文件"></a>仓库根目录下的 .gitignore 文件</h2><p>gitignore文件是一个隐藏文件，该文件的作用是当你将一些文件或文件夹的名称写在 .gitignore 内的话，该仓库执行上传操作的时候，会忽略 .gitignore 内添加的文件或文件夹。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>仓库不能嵌套仓库</li></ul><h2 id="类似-github-网站的其他工具"><a href="#类似-github-网站的其他工具" class="headerlink" title="类似 github 网站的其他工具"></a>类似 github 网站的其他工具</h2><ul><li>腾讯云开发者平台(coding)：是一个和 github 类似的网站，服务器是国内的，所以操作起来速度很快。</li><li>码云：一般需要从github上下载项目，可以通过码云来下载。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
